/*
	Copyright (C) 2014 Apple Inc. All Rights Reserved. Not to be used or disclosed without permission from Apple.
	
	Small implementation of Curve25519 and Ed25519 for resource constrained systems.
*/

#ifndef	__Small25519_h__
#define	__Small25519_h__

#include "CommonServices.h"

#ifdef __cplusplus
extern "C" {
#endif

// Map names to remove the "_small" suffix. This avoids collisions in cases where both are needed (e.g. testing).

#if( !defined( SMALL_25519_MAP_NAMES ) || SMALL_25519_MAP_NAMES )
	#define curve25519_donna				curve25519_small
	#define ed25519_make_key_pair_ref		ed25519_make_key_pair_small
	#define ed25519_sign_ref				ed25519_sign_small
	#define ed25519_verify_ref				ed25519_verify_small
#endif

//---------------------------------------------------------------------------------------------------------------------------
/*!	@function	curve25519_small
	@abstract	Performs elliptic-curve Diffie-Hellman using Curve25519.
	
	@param		outKey			Receives 32-byte output key.
	@param		inSecret		32-byte secret key.
	@param		inBasePoint		32-byte public key or NULL when generating a public key.
*/
void	curve25519_small( uint8_t *outKey, const uint8_t *inSecret, const uint8_t *inBasePoint );

//---------------------------------------------------------------------------------------------------------------------------
/*!	@function	ed25519_make_key_pair_small
	@abstract	Makes a random key pair.
	
	@param		outPK	Receives a 32-byte public key.
	@param		outSK	Receives a 32-byte secret key.
*/
void	ed25519_make_key_pair_small( uint8_t outPK[ 32 ], uint8_t outSK[ 32 ] );

//---------------------------------------------------------------------------------------------------------------------------
/*!	@function	ed25519_sign_small
	@abstract	Signs a message using a secret key.
	
	@param		outSig		Receives the 64-byte signature.
	@param		inMsg		Data to sign.
	@param		inLen		Number of bytes to sign.
	@param		inPK		32-byte public key as generated by ed25519_make_key_pair_small().
	@param		inSK		32-byte secret key as generated by ed25519_make_key_pair_small().
*/
void	ed25519_sign_small( uint8_t outSig[ 64 ], const void *inMsg, size_t mlen, const uint8_t inPK[ 32 ], const uint8_t inSK[ 32 ] );

//---------------------------------------------------------------------------------------------------------------------------
/*!	@function	ed25519_verify_small
	@abstract	Verifies a signed message using a public key.
	
	@param		inMsg		Data to verify.
	@param		inLen		Number of bytes of data to verify.
	@param		inSig		64-byte signature to verify data against.
	@param		inPK		32-byte public key. Should have been generated by the peer using ed25519_make_key_pair_small().
	
	@result		0=Signed message is valid. Non-zero=Bad message.
*/
int	ed25519_verify_small( const void *inMsg, size_t inLen, const uint8_t inSig[ 64 ], const uint8_t inPK[ 32 ] );

#ifdef __cplusplus
}
#endif

#endif // __Small25519_h__
