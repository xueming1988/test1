//
//  asr_define.h
//  BDSASRCore
//
//  Created by baidu on 10/23/14.
//  Copyright (c) 2014 baidu. All rights reserved.
//

#ifndef BDSASRCore_asr_define_h
#define BDSASRCore_asr_define_h

#include <stdint.h>

// Recognition request resource types
typedef enum ASR_RESOURCE_TYPE
{
    RESOURCE_TYPE_DEFAULT = -1,
    RESOURCE_TYPE_NONE = 0,     // Recog only
    RESOURCE_TYPE_NLU = 1,      // Recog + NLU
    RESOURCE_TYPE_WISE = 2,     // Recog + Wise
    RESOURCE_TYPE_WISE_NLU = 3, // Recog + NLU + Wise
    RESOURCE_TYPE_POST = 4,     // Recog + Post
    RESOURCE_TYPE_AUDIO_DA = 8, // Recog + audio_da
    RESOURCE_TYPE_TALK = 16,    // Recog + talk
} ASR_RESOURCE_TYPE;

// Recog segment area types
typedef enum ASR_PROPERTY_TYPE
{
    ASR_PROPERTY_MUSIC = 10001, // Music
    ASR_PROPERTY_VIDEO = 10002, // Video
    ASR_PROPERTY_APP = 10003, // App
    ASR_PROPERTY_WEB = 10004, // web
    ASR_PROPERTY_SEARCH = 10005, // Search
    ASR_PROPERTY_SHOPPING = 10006, // Shopping
    ASR_PROPERTY_HEALTH = 10007, // Health
    ASR_PROPERTY_CALL = 10008, // Telephone
    ASR_PROPERTY_SONG = 10009, // Music-recog
    ASR_PROPERTY_MEDICALCARE = 10052, // Medical
    ASR_PROPERTY_CAR = 10053, // Car
    ASR_PROPERTY_CATERING = 10054, // Cater
    ASR_PROPERTY_FINANCE = 10055, // Finance
    ASR_PROPERTY_GAME = 10056, // Game
    ASR_PROPERTY_COOKBOOK = 10057, // Cook
    ASR_PROPERTY_ASSISTANT = 10058, // Assistant
    ASR_PROPERTY_RECHARGE = 10059, // Fee Charge
    ASR_PROPERTY_MAP = 10060,       // Map
    ASR_PROPERTY_INPUT = 20000, // Input
} ASR_PROPERTY_TYPE;

// Recog Languages
typedef enum ASR_LANGUAGE_TYPE
{
    ASR_LANGUAGE_CHINESE = 0,
    ASR_LANGUAGE_CANTONESE,
	ASR_LANGUAGE_SICHUAN,
    ASR_LANGUAGE_ENGLISH,
} ASR_LANGUAGE_TYPE;

// Zip types
typedef enum ASR_COMPRESS_TYPE
{
    ASR_COMPRESS_TYPE_BV,           // BV
    ASR_COMPRESS_TYPE_AMR,          // AMR
    ASR_COMPRESS_TYPE_OPUS,         // OPUS
    ASR_COMPRESS_TYPE_MP3,          // MP3
    ASR_COMPRESS_TYPE_PCM,          // PCM
} ASR_COMPRESS_TYPE;

// Sample Rate
typedef enum ASR_AUDIO_SAMPLE_RATE
{
    ASR_AUDIO_SAMPLE_RATE_NONE = 0,
    ASR_AUDIO_SAMPLE_RATE_8K = 8000,
    ASR_AUDIO_SAMPLE_RATE_16K = 16000
} ASR_AUDIO_SAMPLE_RATE;

// Vad Libs
typedef enum ASR_VAD_LIB_TYPE
{
    ASR_VAD_LIB_MFE = 0,             // MFE
    ASR_VAD_LIB_LWVAD = 1,           // light lib
} ASR_VAD_TYPE;

typedef enum ASR_STATUS
{
    ASR_STATUS_NONE,            // init status
    ASR_STATUS_SPEAK_START,     // speech start
    ASR_STATUS_SENTENCE_END,    // sentence end
    ASR_STATUS_SPEAK_END,       // speech end
}ASR_STATUS;

// Network type
typedef enum ASR_NET_TYPE
{
    ASR_NET_TYPE_NONE,
    ASR_NET_TYPE_WWAN,              // 2G/3G/4G
    ASR_NET_TYPE_WIFI,              // wifi
} ASR_NET_TYPE;

// Recog core params
typedef enum ASR_PARAM_TYPE
{
    ASR_PARAM_PRODUCT_ID,                       // int32_t, product id
    ASR_PARAM_RECOG_PROPERTY,                   // int32_t[], prop list
    ASR_PARAM_RESOURCE_TYPE,                    // enum ASR_RESOURCE_TYPE, resourcetype
    ASR_PARAM_CITY_ID,                          // int32_t, city idï¼Œfrom 1 to 10000
    ASR_PARAM_COMPRESS_TYPE,                    // enum ASR_COMPRESS_TYPE, compress mode
    ASR_PARAM_VAD_LIB_TYPE,                     // enum ASR_VAD_TYPE, vad lib type
    ASR_PARAM_LANGUAGE,                         // enum ASR_LANGUAGE_TYPE, language
    ASR_PARAM_ENABLE_VAD,                       // int32_t, use vad or not
    ASR_PARAM_AUDIO_SAMPLE_RATE,                // enum ASR_AUDIO_SAMPLE_RATE, sample rate
    ASR_PARAM_HTTP_TIMEOUT_IN_SECONDS,          // uint64_t, network timeout
	ASR_PARAM_VAD_WAIT_TIME,                    // uint64_t, vad max wait time.
    ASR_PARAM_SERVER_URL,                       // const char*, server url
    ASR_PARAM_API_KEY,                          // const char*, api key
    ASR_PARAM_SECRET_KEY,                       // const char*, secret key
    ASR_PARAM_DEVICE_ID,                        // const char*, device id
    ASR_PARAM_PACKAGE_NAME,                     // const char*, package name
    ASR_PARAM_VERSION,                          // const char*, version
    ASR_PARAM_NET_TYPE,                         // enum ASR_NET_TYPE, network type
    ASR_PARAM_ACCESS_TOKEN,                     // const char*, token, generated by apikey and secretkey.
    ASR_PARAM_PLATFORM,                         // const char*, platform information
    
    ASR_PARAM_OTHER_PARAM,                      // const char*, other param
    ASR_PARAM_TEXT,                             // const char*, text, if choose text, there will no audio and recog, only nlu.
    ASR_PARAM_STATIC,                           // const char*, statistics info
    ASR_PARAM_LIGHT_APP_UID,                    // const char*, light app param
    ASR_PARAM_USER_AGENT,                       // const char*, UA, for some kinds of net.
    
    ASR_PARAM_ENABLE_NLU,                       // int32_t, use nlu or not
    ASR_PARAM_ENABLE_PUNCTUACTION,              // int32_t, use punctuaction or not
    ASR_PARAM_ENABLE_MULTI_SN,                  // int32_t, use multiply sn or not
//  ASR_PARAM_ENABLE_PTC_LIST,                  // int32_t[], protocol list, current not used.
    ASR_PARAM_ENABLE_CONTACTS,                  // int32_t, use contact or not 
    ASR_PARAM_ENABLE_EARLY_RETURNS,             // int32_t, support early return or not
	ASR_PARAM_ENABLE_CONTINUOUS_RECOG,          // int32_t, enable continous recog or not
    
    ASR_PARAM_UPLOAD_BROWSER_UA,                // const char*, browser UA
    ASR_PARAM_UPLOAD_COOKIE,                    // const char*, browser cookie
    ASR_PARAM_UPLOAD_PU,                        // const char*, pu
    ASR_PARAM_UPLOAD_FROM,                      // const char*, from
    ASR_PARAM_UPLOAD_RESERVE,                   // const char*, reserve
    
    ASR_PARAM_AUDIO_DATA_CB,                    // asr_core_audio_data_callback, asr_core use this callback function to get audio data.
    ASR_PARAM_AUDIO_DATA_CB_PARAM,              // void*, asr_core_audio_data_callback return back params.
    ASR_PARAM_RESULT_CB,                        // asr_core_result_callback, asr_core use this callback function to output recog results
    ASR_PARAM_RESULT_CB_PARAM,                  // void*, asr_core_result_callback return back params.
    ASR_PARAM_STATUS_CB,                        // asr_core_status_callback, asr_core status callback
    ASR_PARAM_STATUS_CB_PARAM,                  // void*, asr_core_status_callback user params
} ASR_PARAM_TYPE;

typedef enum ASR_CORE_ERROR_NUMBER
{
    ASR_CORE_OK = 0,
    ASR_CORE_ERR_BUSY,                          // 1 ASR Engine busy
    ASR_CORE_ERR_NO_RUN,                        // 2 Running failed
    ASR_CORE_ERR_INVALID_PARAM,                 // 3 Invalid params
    ASR_CORE_ERR_START_VAD,                     // 4 Start Vad failed
    ASR_CORE_ERR_AUDIO_DATA_NOT_ENOUGH,         // 5 Not enough audio data
    ASR_CORE_ERR_VAD_SEND_DATA,                 // 6 Vad send data error
    ASR_CORE_ERR_VAD_GET_DATA,                  // 7 Vad get data error
    ASR_CORE_ERR_VAD_NO_SPEECH,                 // 8 Vad no speech
    ASR_CORE_ERR_VAD_SPEECH_TOO_SHORT,          // 9 Vad too short speech
    ASR_CORE_ERR_VAD_UNKNOWN_STATUS,            // 10 Vad unknown status
    ASR_CORE_ERR_CREATE_REQUEST,                // 11 Create request failed
    ASR_CORE_ERR_START_HTTP_THREAD,             // 12 Start http failed
    ASR_CORE_ERR_CURL_FAILED,                   // 13 curl failed
    ASR_CORE_ERR_JSON_PARSE,                    // 14 json parse error
    ASR_CORE_ERR_HTTP_STATUS,                   // 15 http error
    
    // Recog param check
    ASR_CORE_ERR_PROPERTY_INVALID,              // 16 property invalid
    ASR_CORE_ERR_DEVICE_ID_INVALID,             // 17 device id invalid
    ASR_CORE_ERR_APPNAME_INVALID,               // 18 appname invalid
    ASR_CORE_ERR_VERSION_INVALID,               // 19 version invalid
    ASR_CORE_ERR_PLATFORM_INVALID,              // 20 platform invalid
    ASR_CORE_ERR_AUDIO_CALLBACK_INVALID,        // 21 input audio data callback invalid
    ASR_CORE_ERR_RESULT_CALLBACK_INVALID,       // 22 output recog result callback invalid
    
    // Server error
    ASR_CORE_ERR_SVR_PARAM,                     // 23 Param error
    ASR_CORE_ERR_SVR_RECOG,                     // 24 Recog error
    ASR_CORE_ERR_SVR_NO_FIND_RESULT,            // 25 No Match Result
    ASR_CORE_ERR_SVR_APP_NAME_UNKNOWN,          // 26 Token or PackageName error
    ASR_CORE_ERR_SVR_SPEECH_QUALITY_PROBLEM,    // 27 Audio Quality error
    ASR_CORE_ERR_SVR_SPEECH_TOO_LONG,           // 28 Too long audio data
    ASR_CORE_ERR_SVR_UNKNOWN,                   // 29 Unknown server error
    
    ASR_CORE_ERR_SPEAK_END,                     // 30 input audio data afer vad detect status is 
    ASR_CORE_ERR_TOKEN_INVALID,                 // 31 access token invalid  
} ASR_CORE_ERROR_NUMBER;

// Recog result types
typedef enum ASR_RESULT_TYPE
{
    ASR_RESULT_TYPE_ERROR = -1,                 // Error code
    ASR_RESULT_TYPE_EMPTY = 0,                  // Empty reply
    ASR_RESULT_TYPE_PARTIAL = 1,                // Partial result
    ASR_RESULT_TYPE_NBEST = 2,                  // Nbest result
    ASR_RESULT_TYPE_CN = 3,                     // CN result
    ASR_RESULT_TYPE_RESOURCE = 4                // NLU & resource result
} ASR_RESULT_TYPE;

// log level
typedef enum ASR_LOG_LEVEL
{
    ASR_LOG_LEVEL_OFF   = 0,
    ASR_LOG_LEVEL_FATAL = 1,
    ASR_LOG_LEVEL_ERROR = 2,
    ASR_LOG_LEVEL_WARN  = 3,
    ASR_LOG_LEVEL_INFO  = 4,
    ASR_LOG_LEVEL_DEBUG = 5,
    ASR_LOG_LEVEL_TRACE = 6,
} ASR_LOG_LEVEL;

// recognition result agent
typedef struct RecognitionResult
{
    ASR_RESULT_TYPE type;                       // result type
    int32_t         error_code;                 // recognition error code
    const char*     asr_result;                 // recognition result
    const char*     resource;                   // other resource data, for example: audio, picture, and so on.
    uint32_t        resource_len;               // resouce data length
}RecognitionResult;

/**
 * @brief Callback for inputing audio dataï¼Œasr_core use it get audio data.
 *
 * @param audio_buf:       data buffer
 * @param audio_buf_len:   buffer size
 * @param user_param:      params
 *
 * @return the size of read data already. If equal to -1, no more data.
 */
typedef int32_t (*asr_core_audio_data_callback)(char* audio_buf, int32_t audio_buf_len, void* user_param);

/**
 * @brief Recog result callback
 *
 * @param result recognition result
 * @param user_param user set parameter by ASR_PARAM_RESULT_CB_PARAM
 *
 * @return void
 */
typedef void (*asr_core_result_callback)(RecognitionResult* result, void* user_param);

/**
 * @brief ASR status callbackï¼Œmainly vad status
 *
 * @param status: current ASR status
 * @param user_param: user params
 *
 * @return void
 */
typedef void (*asr_core_status_callback)(ASR_STATUS status, void* user_param);
#endif
